{"version":3,"sources":["components/Checkbox.tsx","components/Delete.tsx","components/Todo.tsx","components/Title.tsx","components/TodoInput.tsx","containers/TodoListContainer.tsx","utils/storage.ts","App.tsx","index.tsx"],"names":["Label","styled","label","Input","input","Span","span","props","checked","Checkbox","content","onChange","className","type","event","Button","button","Delete","onClick","Container","div","Todo","todo","checkBoxChanged","deleteTodo","id","isDone","Title","title","TextInput","TodoInput","addTodo","onKeyPress","charCode","target","value","placeholder","main","TodoListContainer","key","storedTodoList","localStorage","getItem","values","JSON","parse","useState","todos","setTodos","useEffect","setItem","setStorage","stringify","toggleCheckbox","updated","map","element","filter","concat","Math","random","toString","substr","App","ReactDOM","render","document","getElementById"],"mappings":"wmCAaA,IAAMA,EAAQC,IAAOC,MAAV,KAYLC,EAAQF,IAAOG,MAAV,KAKLC,EAAOJ,IAAOK,KAAV,KAWK,SAACC,GAAD,OAAuBA,EAAMC,QAAU,SAAW,UA0BlDC,EAbE,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,SAAUH,EAA6B,EAA7BA,QAIrC,OACE,kBAACR,EAAD,CAAOY,UAAWJ,EAAU,UAAY,IACrCE,EACD,kBAACP,EAAD,CAAOU,KAAK,WAAWF,SANT,SAACG,GACjBH,OAME,kBAACN,EAAD,CAAMG,QAASA,M,6NCxDrB,IAAMO,EAASd,IAAOe,OAAV,KAcGC,EAJA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAChB,OAAO,kBAACH,EAAD,CAAQG,QAASA,GAAjB,M,6KCFT,IAAMC,EAAYlB,IAAOmB,IAAV,KA4BAC,EApBF,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,gBAAiBC,EAA4B,EAA5BA,WAQrC,OACE,kBAACL,EAAD,KACE,kBAAC,EAAD,CACET,QAASY,EAAKZ,QACdC,SAXa,WACjBY,EAAgBD,EAAKG,KAWjBjB,QAASc,EAAKI,SAEhB,kBAAC,EAAD,CAAQR,QAVc,WACxBM,EAAWF,EAAKG,S,qPCvBpB,IAAMN,EAAYlB,IAAOmB,IAAV,KAeAO,EAJD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MACf,OAAO,kBAAC,EAAD,KAAYA,I,8VCZrB,IAAMC,EAAY5B,IAAOG,MAAV,KAgCA0B,EAlBG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QASnB,OACE,kBAACF,EAAD,CACEhB,KAAK,OACLmB,WAXmB,SAAClB,GACC,KAAnBA,EAAMmB,UACmB,KAAvBnB,EAAMoB,OAAOC,QACfJ,EAAQjB,EAAMoB,OAAOC,OACrBrB,EAAMoB,OAAOC,MAAQ,KAQvBC,YAAa,4B,uPCnBnB,IAAMjB,EAAYlB,IAAOoC,KAAV,KA+DAC,EAjDW,WACxB,ICzByBC,EDyBnBC,GCzBmBD,EDyBS,QCxBrBE,aAAaC,QAAQH,IACnB,IDwBTI,EAASH,EAAiBI,KAAKC,MAAML,GAAkB,GAF/B,EAGJM,mBAASH,GAHL,mBAGvBI,EAHuB,KAGhBC,EAHgB,KAK9BC,qBAAU,YCjCL,SAAoBV,EAAaJ,GACtCM,aAAaS,QAAQX,EAAKJ,GDiCxBgB,CAAW,QAASP,KAAKQ,UAAUL,OAGrC,IASMM,EAAiB,SAAC5B,GACtB,IAAI6B,EAAUP,EAAMQ,KAAI,SAACC,GAIvB,OAHIA,EAAQ/B,KAAOA,IACjB+B,EAAQ9B,QAAU8B,EAAQ9B,QAErB8B,KAETR,EAASM,IAGL9B,EAAa,SAACC,GAClB,IAAI6B,EAAUP,EAAMU,QAAO,SAACD,GAAD,OAAsBA,EAAQ/B,KAAOA,KAChEuB,EAASM,IAGX,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAO1B,MAAO,eACd,kBAAC,EAAD,CAAWG,QA3BC,SAACrB,GACf,IAAM4C,EAAUP,EAAMW,OAAO,CAC3BjC,GAbG,IAAMkC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GAc9CpC,QAAQ,EACRhB,QAASA,IAEXsC,EAASM,MAsBNP,EAAMQ,KAAI,SAACjC,GAAD,OACT,kBAAC,EAAD,CACEiB,IAAKjB,EAAKG,GACVH,KAAMA,EACNC,gBAAiB8B,EACjB7B,WAAYA,SE9DPuC,G,MAJH,WACV,OAAO,kBAAC,EAAD,QCDTC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.31249a28.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ntype CheckboxProps = {\n  content: string;\n  onChange: Function;\n  checked: boolean;\n};\n\ntype SpanProps = {\n  checked: boolean;\n};\n\nconst Label = styled.label`\n  padding: 15px 30px;\n  padding-left: 40px;\n  vertical-align: text-top;\n  position: relative;\n  cursor: pointer;\n\n  &.checked {\n    text-decoration: line-through;\n  }\n`;\n\nconst Input = styled.input`\n  position: absolute;\n  opacity: 0;\n`;\n\nconst Span = styled.span`\n  position: absolute;\n  left: 3px;\n  height: 25px;\n  width: 25px;\n  background-color: #eee;\n  top: 17px;\n\n  &:after {\n    content: \"\";\n    position: absolute;\n    display: ${(props: SpanProps) => (props.checked ? \"inline\" : \"none\")};\n    margin-right: 10px;\n    left: 9px;\n    top: 5px;\n    width: 5px;\n    height: 10px;\n    border: solid black;\n    border-width: 0 3px 3px 0;\n    -webkit-transform: rotate(45deg);\n    -ms-transform: rotate(45deg);\n    transform: rotate(45deg);\n  }\n`;\nconst Checkbox = ({ content, onChange, checked }: CheckboxProps) => {\n  const onChanged = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    onChange();\n  };\n  return (\n    <Label className={checked ? \"checked\" : \"\"}>\n      {content}\n      <Input type=\"checkbox\" onChange={onChanged}></Input>\n      <Span checked={checked} />\n    </Label>\n  );\n};\n\nexport default Checkbox;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype DeleteProps = {\n  onClick: () => void;\n};\nconst Button = styled.button`\n  float: right;\n  background-color: transparent;\n  border-width: 0;\n  color: white;\n  font-size: 30px;\n  margin-left: auto;\n  cursor: pointer;\n`;\n\nconst Delete = ({ onClick }: DeleteProps) => {\n  return <Button onClick={onClick}>X</Button>;\n};\n\nexport default Delete;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Checkbox from \"./Checkbox\";\nimport Delete from \"./Delete\";\n\ntype TodoProps = {\n  todo: {\n    id: string;\n    isDone: boolean;\n    content: string;\n  };\n  checkBoxChanged: Function;\n  deleteTodo: Function;\n};\n\nconst Container = styled.div`\n  display: flex;\n  margin: 5px 1px;\n  width: 90%;\n  border: 1px white solid;\n  font-size: 1.5em;\n`;\n\nconst Todo = ({ todo, checkBoxChanged, deleteTodo }: TodoProps) => {\n  const updateTodo = () => {\n    checkBoxChanged(todo.id);\n  };\n\n  const clickDeleteButton = () => {\n    deleteTodo(todo.id);\n  };\n  return (\n    <Container>\n      <Checkbox\n        content={todo.content}\n        onChange={updateTodo}\n        checked={todo.isDone}\n      />\n      <Delete onClick={clickDeleteButton} />\n    </Container>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype TitleProps = {\n  title: string;\n};\nconst Container = styled.div`\n  display: block;\n  float: left;\n  font-size: 100px;\n  font-weight: 100;\n  text-align: center;\n  text-rendering: optimizelegibility;\n  width: 100%;\n  color: #f4f9e9;\n`;\n\nconst Title = ({ title }: TitleProps) => {\n  return <Container>{title}</Container>;\n};\n\nexport default Title;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype TodoInput = {\n  addTodo: (content: string) => void;\n};\nconst TextInput = styled.input`\n  -webkit-font-smoothing: antialiased;\n  border-style: none;\n  box-shadow: rgba(0, 0, 0, 0.03) 0 -2px 1px inset;\n  box-sizing: border-box;\n  font-size: 24px;\n  line-height: 1.4em;\n  padding: 16px 16px 16px 60px;\n  width: 100%;\n  &::placeholder {\n    opacity: 0.5;\n  }\n`;\n\nconst TodoInput = ({ addTodo }: TodoInput) => {\n  const handleKeyPress = (event: any) => {\n    if (event.charCode === 13) {\n      if (event.target.value !== \"\") {\n        addTodo(event.target.value);\n        event.target.value = \"\";\n      }\n    }\n  };\n  return (\n    <TextInput\n      type=\"text\"\n      onKeyPress={handleKeyPress}\n      placeholder={\"What needs to be done?\"}\n    />\n  );\n};\n\nexport default TodoInput;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Todo from \"../components/Todo\";\nimport Title from \"../components/Title\";\nimport TodoInput from \"../components/TodoInput\";\nimport { setStorage, getStorage } from \"../utils/storage\";\nimport axios from \"axios\";\n\ntype TodoObj = {\n  id: string;\n  isDone: boolean;\n  content: string;\n};\n\nconst Container = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #284b63;\n  max-width: 800px;\n  margin: auto;\n  min-height: 100vh;\n  color: white;\n`;\n\nconst generateID = () => {\n  return \"_\" + Math.random().toString(36).substr(2, 9);\n};\nconst TodoListContainer = () => {\n  const storedTodoList = getStorage(\"todos\");\n  const values = storedTodoList ? JSON.parse(storedTodoList) : [];\n  const [todos, setTodos] = useState(values);\n\n  useEffect(() => {\n    setStorage(\"todos\", JSON.stringify(todos));\n  });\n\n  const addTodo = (content: string) => {\n    const updated = todos.concat({\n      id: generateID(),\n      isDone: false,\n      content: content,\n    });\n    setTodos(updated);\n  };\n\n  const toggleCheckbox = (id: string) => {\n    let updated = todos.map((element: TodoObj) => {\n      if (element.id === id) {\n        element.isDone = !element.isDone;\n      }\n      return element;\n    });\n    setTodos(updated);\n  };\n\n  const deleteTodo = (id: string) => {\n    let updated = todos.filter((element: TodoObj) => element.id !== id);\n    setTodos(updated);\n  };\n\n  return (\n    <Container>\n      <Title title={\"typescript\"} />\n      <TodoInput addTodo={addTodo} />\n      {todos.map((todo: TodoObj) => (\n        <Todo\n          key={todo.id}\n          todo={todo}\n          checkBoxChanged={toggleCheckbox}\n          deleteTodo={deleteTodo}\n        />\n      ))}\n    </Container>\n  );\n};\n\nexport default TodoListContainer;\n","export function setStorage(key: string, value: string) {\n  localStorage.setItem(key, value);\n}\n\nexport function getStorage(key: string): string {\n  const list = localStorage.getItem(key);\n  return list || \"\";\n}\n","import React from \"react\";\nimport TodoListContainer from \"./containers/TodoListContainer\";\nimport \"./App.css\";\n\nconst App = () => {\n  return <TodoListContainer />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}